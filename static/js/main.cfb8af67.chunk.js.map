{"version":3,"sources":["themeStyle/ThemeStyle.js","SiteJson/SiteJson.js","siteUrl/SiteUrl.js","errorUrl/ErrorUrl.js","App.js","serviceWorker.js","index.js"],"names":["theme","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","SiteJson","jsonData","className","data","invertTheme","SiteUrl","handleUrl","InputGroup","size","Prepend","Text","id","FormControl","name","aria-label","aria-describedby","onChange","e","target","value","ErrorUrl","App","useState","jsonDate","setJson","siteUrl","setUrl","error","setError","isLoading","setLoading","useEffect","a","fetch","method","headers","res","ok","Error","json","fetchData","Container","url","length","Spinner","animation","variant","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oRAqBiBA,EArBF,CACXC,OAAQ,UACRC,OAAQ,0CACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,WCLGC,MATf,YAA+B,IAAZC,EAAW,EAAXA,SAEjB,OACE,yBAAKC,UAAU,YACX,kBAAC,IAAD,CAAUrB,MAAOA,EAAOsB,KAAMF,EAAUG,aAAa,M,eCU9CC,MAff,YAA+B,IAAbC,EAAY,EAAZA,UAEhB,OACE,yBAAKJ,UAAU,WACb,iDACA,kBAACK,EAAA,EAAD,CAAYC,KAAK,MACf,kBAACD,EAAA,EAAWE,QAAZ,KACA,kBAACF,EAAA,EAAWG,KAAZ,CAAiBC,GAAG,wBAApB,4BAEA,kBAACC,EAAA,EAAD,CAAaC,KAAK,MAAMC,aAAW,QAAQC,mBAAiB,uBAAuBC,SAAU,SAACC,GAAD,OAAKX,EAAUW,EAAEC,OAAOC,a,MCD9GC,MATf,WAEE,OACE,yBAAKlB,UAAU,YACb,2D,gBCkDSmB,MAhDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACIC,EADJ,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAEGC,EAFH,OAGaJ,oBAAS,GAHtB,mBAGNK,EAHM,KAGCC,EAHD,OAImBN,oBAAS,GAJ5B,mBAINO,EAJM,KAIKC,EAJL,KAiCb,OA3BAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,+EAEIC,MAAMR,EAAQ,CAC9BS,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,8BAA+B,OANrB,WAERC,EAFQ,QASNC,GATM,sBAUZT,GAAS,GACH,IAAIU,MAAM,+BAXJ,wBAaOF,EAAIG,OAbX,QAaNA,EAbM,OAcZX,GAAS,GACTE,GAAW,GACXN,EAAQe,GAhBI,0DAmBdX,GAAS,GACTE,GAAW,GApBG,0DAAH,qDAuBfU,KACC,CAACf,IAGF,yBAAKvB,UAAU,OACb,kBAACuC,EAAA,EAAD,KACE,kBAAC,EAAD,CAASnC,UAAW,SAACoC,GACnBhB,EAAOgB,GACPZ,GAAW,MAEZH,GAASF,EAAQkB,OAAS,kBAAC,EAAD,MAAad,EACxC,kBAACe,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,YAClC,kBAAC,EAAD,CAAU7C,SAAUsB,OCtCVwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,c","file":"static/js/main.cfb8af67.chunk.js","sourcesContent":[" const theme = {\n    scheme: 'monokai',\n    author: 'wimer hazenberg (http://www.monokai.nl)',\n    base00: '#272822',\n    base01: '#383830',\n    base02: '#49483e',\n    base03: '#75715e',\n    base04: '#a59f85',\n    base05: '#f8f8f2',\n    base06: '#f5f4f1',\n    base07: '#f9f8f5',\n    base08: '#f92672',\n    base09: '#fd971f',\n    base0A: '#f4bf75',\n    base0B: '#a6e22e',\n    base0C: '#a1efe4',\n    base0D: '#66d9ef',\n    base0E: '#ae81ff',\n    base0F: '#cc6633',\n  };\n\n  export default theme;","import React, { useState, useEffect } from 'react';\nimport JSONTree from 'react-json-tree';\nimport theme from '../themeStyle/ThemeStyle';\n\nfunction SiteJson({jsonData}) {\n  \n  return (  \n    <div className=\"SiteJson\">\n        <JSONTree theme={theme} data={jsonData} invertTheme={true} /> \n    </div>\n  );\n}\n\nexport default SiteJson;\n","import React from 'react';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nfunction SiteUrl({handleUrl}) {\n  \n  return (  \n    <div className=\"SiteUrl\">\n      <h1>Enter your site: </h1>\n      <InputGroup size=\"lg\">\n        <InputGroup.Prepend>\n        <InputGroup.Text id=\"inputGroup-sizing-lg\">Enter URL to fetch JSON</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl name=\"url\" aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" onChange={(e)=>handleUrl(e.target.value)}/>\n    </InputGroup>\n    </div>\n  );\n}\n\nexport default SiteUrl;\n","import React from 'react';\n\nfunction ErrorUrl() {\n  \n  return (  \n    <div className=\"ErrorUrl\">\n      <h1>Please enter a valid URL </h1>\n    </div>\n  );\n}\n\nexport default ErrorUrl;\n","import React, { useState, useEffect } from 'react';\nimport SiteJson from './SiteJson/SiteJson';\nimport SiteUrl from './siteUrl/SiteUrl';\nimport './App.css';\nimport ErrorUrl from './errorUrl/ErrorUrl';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  const [jsonDate, setJson] = useState('');\n  const [siteUrl, setUrl] = useState('');\n  const [error, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try{\n        const res = await fetch(siteUrl,{\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n          }\n        })\n        if(!res.ok){\n          setError(true);\n          throw new Error('Network response was not ok');\n        }else{\n          const json = await res.json();\n          setError(false);\n          setLoading(false);\n          setJson(json);\n        }\n      }catch(error){\n        setError(true);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [siteUrl]);\n\n  return (  \n    <div className=\"App\">\n      <Container >\n        <SiteUrl handleUrl={(url)=>{\n          setUrl(url);\n          setLoading(true);\n        }}/>\n        {error && siteUrl.length ? <ErrorUrl/>: isLoading ? \n        <Spinner animation=\"border\" variant=\"primary\" /> \n        : <SiteJson jsonData={jsonDate}/> }\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}