{"version":3,"sources":["singleItem/SingleItemArr.js","jsonItem/JsonItem.js","SiteJson/SiteJson.js","siteUrl/SiteUrl.js","errorUrl/ErrorUrl.js","App.js","serviceWorker.js","index.js"],"names":["SingleItemArr","item","useState","open","setOpen","className","Button","onClick","aria-controls","aria-expanded","length","Collapse","in","id","map","childItem","i","key","Array","isArray","JsonItem","isParent","objKey","setObjKey","objVal","setObjVal","useEffect","propertyNames","Object","keys","valueToString","values","setItem","toString","width","height","viewBox","fill","xmlns","fillRule","d","singleKey","y","SiteJson","jsonData","SiteUrl","handleUrl","InputGroup","size","Prepend","Text","FormControl","name","aria-label","aria-describedby","onChange","e","target","value","ErrorUrl","App","jsonDate","setJson","siteUrl","setUrl","error","setError","isLoading","setLoading","a","fetch","method","res","ok","Error","json","newArr","push","fetchData","Container","url","Spinner","animation","variant","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d02095fb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Button from 'react-bootstrap/Button';\nimport JsonItem from '../jsonItem/JsonItem';\n\nfunction SingleItemArr({item}) {\n\n  const [open, setOpen] = useState(false);\n\n  return (  \n    <div className=\"SingleItemArr\">\n        <Button onClick={() => setOpen(!open)} aria-controls=\"child-fade-text\" aria-expanded={open}></Button>[] {item.length ? <span>{item.length}</span>: <span>Empty</span>}\n        <Collapse in={open} >\n            <div id=\"child-collapse-text\">\n              {item ? item.map((childItem, i) => typeof(childItem)==='object' ? <JsonItem key={i} item={childItem}/> : Array.isArray(childItem) ? <SingleItemArr key={i} item={childItem}/>: <span key={i}>childItem</span>): null}\n            </div>\n        </Collapse>\n    </div>\n  );\n}\n\nexport default SingleItemArr;\n","import React, { useState, useEffect } from 'react';\nimport Collapse from 'react-bootstrap/Collapse';\nimport SingleItemArr from '../singleItem/SingleItemArr';\nimport './JsonItem.css';\n\nfunction JsonItem({item, isParent}) {\n  \n    const [open, setOpen] = useState(false);\n    const [objKey , setObjKey ] = useState([]);\n    const [objVal , setObjVal ] = useState([]);\n\n    useEffect(() => {\n                const propertyNames = Object.keys(item);\n                const propertyVal = Object.values(item);\n\n                const valueToString = propertyVal.map(item=>{\n                    let setItem;\n                    if(item){\n                        if(typeof(item) !==\"object\" && !Array.isArray(item)){\n                            setItem = item.toString();\n                        }\n                        setItem = item;\n                    }\n                    return setItem;\n                });\n        \n                setObjKey(propertyNames);\n                setObjVal(valueToString);\n   \n    }, [item]);\n\n  \n  return (  \n\n    <div className=\"JsonItem\">\n            <svg onClick={() => setOpen(!open)} aria-controls=\"example-fade-text\" aria-expanded={open} width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-down-circle-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fillRule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z\"/>\n            </svg>{isParent? <span className=\"object-id\">{item.id}</span>: <span className=\"object-note\">Object</span>}\n\n         <Collapse in={open} >\n            <div id=\"example-collapse-text\">\n                {objKey.map((singleKey, i) => <div className=\"obj-key\" key={i}>{singleKey} : { objVal.map((item, y)=> (i===y ? (typeof(item) !==\"object\" && !Array.isArray(item)) ? <span className=\"obj-val\" key={y}>{item}</span>: (Array.isArray(item) ? <SingleItemArr key={y} item={item}/>: <JsonItem key={y} item={item}/>): null))}</div>)}\n            </div>\n        </Collapse>\n    </div>\n  );\n}\n\nexport default JsonItem;\n","import React from 'react';\nimport JsonItem from '../jsonItem/JsonItem';\n\nfunction SiteJson({jsonData}) {\n\n  return (  \n    <div className=\"SiteJson\">\n        {jsonData.length ? jsonData.map((item, i)=>  <JsonItem key={i} item={item} isParent={true}/>): null}\n    </div>\n  );\n}\n\nexport default SiteJson;\n","import React from 'react';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nfunction SiteUrl({handleUrl}) {\n  \n  return (  \n    <div className=\"SiteUrl\">\n      <h1>Enter your site: </h1>\n      <InputGroup size=\"lg\">\n        <InputGroup.Prepend>\n        <InputGroup.Text id=\"inputGroup-sizing-lg\">Enter URL to fetch JSON</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl name=\"url\" aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" onChange={(e)=>handleUrl(e.target.value)}/>\n    </InputGroup>\n    </div>\n  );\n}\n\nexport default SiteUrl;\n","import React from 'react';\n\nfunction ErrorUrl() {\n  \n  return (  \n    <div className=\"ErrorUrl\">\n      <h1>Please enter a valid URL </h1>\n    </div>\n  );\n}\n\nexport default ErrorUrl;\n","import React, { useState, useEffect } from 'react';\nimport SiteJson from './SiteJson/SiteJson';\nimport SiteUrl from './siteUrl/SiteUrl';\nimport './App.css';\nimport ErrorUrl from './errorUrl/ErrorUrl';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  const [jsonDate, setJson] = useState('');\n  const [siteUrl, setUrl] = useState('');\n  const [error, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try{\n        const res = await fetch(siteUrl,{\n          method: 'GET'\n        })\n        if(!res.ok){\n          setError(true);\n          throw new Error('Network response was not ok');\n          // Please read the README file\n        }else{\n          const json = await res.json();\n          setError(false);\n          setLoading(false);\n\n          if(Array.isArray(json)){\n            setJson(json)\n          }else{\n            const newArr = [];\n            newArr.push(json)\n            setJson(newArr)\n          }\n        }\n      }catch(error){\n        setError(true);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [siteUrl]);\n\n  return (  \n    <div className=\"App\">\n      <Container >\n        <SiteUrl handleUrl={(url)=>{\n          setUrl(url);\n          setLoading(true);\n        }}/>\n        {error && siteUrl.length ? <ErrorUrl/>: isLoading ? \n        <Spinner animation=\"border\" variant=\"primary\" /> \n        : <SiteJson jsonData={jsonDate}/> }\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}